import Head from "next/head";
import styles from "@/styles/Organization.module.css";
import { withPageAuthRequired, getSession } from "@auth0/nextjs-auth0";
import { getSupabase } from "../../utils/supabase";
import { Navbar } from "../../components/Navbar";
import { useState } from "react";
import {
  FormGroup,
  FormControl,
  InputLabel,
  Input,
  TextField,
  Box,
  Button,
} from "@mui/material";

// Post new projects
export default function All({ userProfile }) {
  const [projectForm, setProjectForm] = useState({
    title: "",
    location: "",
    image: "",
    volunteers: 0,
    about: "",
  });

  const supabase = getSupabase();

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log("projectForm", projectForm);

    const sendFormData = async () => {
      const { error } = await supabase.from("project").insert({
        name: projectForm.title,
        description: projectForm.about,
        location: projectForm.location,
        volunteers_needed: projectForm.volunteers,
        image_url: projectForm.image,
        user_id: userProfile.id,
      });

      console.log("error", error);
    };

    sendFormData();

    setProjectForm({
      title: "",
      location: "",
      image: "",
      volunteers: 0,
      about: "",
    });
  };

  const handleChange = (event) => {
    setProjectForm((prevProjectForm) => {
      return {
        ...projectForm,
        [event.target.name]: event.target.value,
      };
    });
  };

  return (
    <>
      <Head>
        <title>Volunteer Vision</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/icon.png" />
      </Head>
      <Navbar userProfile={userProfile} />
      <main className={styles.main}>
        <Box className={styles.post_background}>
          <FormGroup className={styles.post_form_style}>
            <Box my={1}>
              <FormControl className={styles.post_form_line}>
                <InputLabel>Project Name</InputLabel>
                <Input
                  value={projectForm.title}
                  name="title"
                  onChange={handleChange}
                  required
                />
              </FormControl>
            </Box>
            <Box my={1}>
              <FormControl className={styles.post_form_line}>
                <InputLabel>Location</InputLabel>
                <Input
                  value={projectForm.location}
                  name="location"
                  onChange={handleChange}
                  required
                />
              </FormControl>
            </Box>
            <Box my={1}>
              <FormControl className={styles.post_form_textfield}>
                <TextField
                  placeholder="About your project"
                  value={projectForm.about}
                  name="about"
                  onChange={handleChange}
                  required
                />
              </FormControl>
            </Box>
            <Box my={1}>
              <FormControl className={styles.post_form_line}>
                <InputLabel>Project Image Link</InputLabel>
                <Input
                  value={projectForm.image}
                  name="image"
                  onChange={handleChange}
                  required
                />
              </FormControl>
            </Box>
            <Box my={1}>
              <FormControl className={styles.post_form_line}>
                <InputLabel>Number of volunteers needed</InputLabel>
                <Input
                  type="number"
                  value={projectForm.volunteers}
                  name="volunteers"
                  onChange={handleChange}
                  required
                />
              </FormControl>
            </Box>
            <Button
              type="submit"
              variant="contained"
              onClick={handleSubmit}
              disabled={
                !projectForm.title ||
                !projectForm.location ||
                !projectForm.image ||
                !projectForm.volunteers ||
                !projectForm.about
              }
            >
              Submit
            </Button>
          </FormGroup>
        </Box>
      </main>
    </>
  );
}

export const getServerSideProps = withPageAuthRequired({
  async getServerSideProps({ req, res }) {
    const {
      user: { accessToken, sub },
    } = await getSession(req, res);

    const supabase = getSupabase(accessToken);
    let userProfile = null;

    try {
      // if no user has user_id of sub, create new user
      const { data } = await supabase
        .from("user")
        .upsert({ user_id: sub }, { onConflict: "user_id" })
        .select();

      userProfile = data[0];
    } catch (e) {
      console.error(e.message);
    }

    return {
      props: { userProfile },
    };
  },
});
